{"version":3,"file":"reactivity.global.js","sources":["../../shared/src/index.ts","../src/effect.ts","../src/baseHandlers.ts","../src/reactive.ts","../src/ref.ts"],"sourcesContent":["export const isObject = (value) => typeof value === \"object\" && value !== null;\r\nexport const extend = Object.assign;\r\nexport const isArray = (value) => Array.isArray(value);\r\nexport const isFunction = (value) => typeof value === \"function\";\r\nexport const isNumber = (value) => typeof value === \"number\";\r\nexport const isString = (value) => typeof value === \"string\";\r\nexport const isIntegerKey = (key) => parseInt(key) + \"\" === key;\r\n\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\nexport const hasOwn = (target, key) => hasOwnProperty.call(target, key);\r\n\r\nexport const hasChanged = (oldValue, value) => oldValue !== value;\r\n","import { isArray, isIntegerKey } from \"@vue/shared\";\r\nimport { TriggerOperatorTypes } from \"./operators\";\r\n\r\nexport function effect(fn, options: any = {}) {\r\n  // 需要让这个effect编程响应式effect  做到数据变化重新执行\r\n  const effect = createReactiveEffect(fn, options);\r\n  if (!options.lazy) {\r\n    // 响应式的effect会先执行一次\r\n    effect();\r\n  }\r\n\r\n  return effect;\r\n}\r\n\r\nlet uid = 0;\r\n// 存储当前正在运行的effect track函数内部要使用\r\nlet activeEffect;\r\n// 用于存储effect嵌套使用时候出现混乱问题  此时effect函数调用是一个栈结构 此处讲解在依赖收集的30分钟\r\nconst effectStack = [];\r\nfunction createReactiveEffect(fn, options) {\r\n  const effect = function reactiveEffect() {\r\n    console.log(\"默认effect 先执行一次\");\r\n\r\n    // 保证effect没有加入到effectstack\r\n    if (!effectStack.includes(effect)) {\r\n      try {\r\n        effectStack.push(effect);\r\n        activeEffect = effect;\r\n        // 函数执行时候 会执行get方法\r\n        return fn();\r\n      } finally {\r\n        effectStack.pop();\r\n        activeEffect = effectStack[effectStack.length - 1];\r\n      }\r\n    }\r\n  };\r\n\r\n  // 制作一个effect标识， 用于区分effect\r\n  effect.id = uid++;\r\n  // 用于标识这是一个响应式的effect\r\n  effect._isEffect = true;\r\n  // 响应式effect所对应的原函数\r\n  effect.raw = fn;\r\n  // 在effect上保存用户的属性\r\n  effect.options = options;\r\n  return effect;\r\n}\r\n\r\n// 描述  追踪 target 进行type操作时  的key\r\n// 内部可以拿到当前的effect\r\n// 让某个对象中的属性 收集当前它对应的effect函数\r\nconst targetMap = new WeakMap();\r\nexport function track(target, type, key) {\r\n  // activeEffect;\r\n  // 比如 {name: '韩超', age: 19} => name => [effect, effect] effect 可能是多个  多个effect处理同一个对象的属性  会产生多个effect\r\n  if (activeEffect === undefined) {\r\n    //此属性不用手机依赖 因为没在effect中使用\r\n    return;\r\n  }\r\n\r\n  // 同一个effect内  如果get某个属性2次  只会存储一次   多个effect 如果get同一个对象属性   那么该属性对应的effect就会出现多个\r\n  let depsMap = targetMap.get(target);\r\n  if (!depsMap) {\r\n    targetMap.set(target, (depsMap = new Map()));\r\n  }\r\n  let dep = depsMap.get(key);\r\n  if (!dep) {\r\n    depsMap.set(key, (dep = new Set()));\r\n  }\r\n  if (!dep.has(activeEffect)) {\r\n    dep.add(activeEffect);\r\n  }\r\n}\r\n\r\nexport function trigger(target, type, key?, newValue?, oldValue?) {\r\n  // 如果这个属性没有收集过effect  那么不需要做任何操作\r\n  const depsMap = targetMap.get(target);\r\n  if (!depsMap) return;\r\n\r\n  const effects = new Set();\r\n  // 需要将所有的要执行的effect  全部存到一个新的集合  最后一起执行\r\n\r\n  const add = (effectsToAdd) => {\r\n    if (effectsToAdd) {\r\n      effectsToAdd.forEach((effect) => effects.add(effect));\r\n    }\r\n  };\r\n\r\n  // 1 看修改的是不是数组的长度  因为改长度影响比较大\r\n  if (key === \"length\" && isArray(target)) {\r\n    // 如果对应的长度  有依赖收集  需要更新\r\n    depsMap.forEach((dep, key) => {\r\n      console.log(depsMap, dep, key);\r\n      if (key === \"length\" || key > newValue) {\r\n        // 如果更改的长度  小于收集的索引  那么要触发effect重新执行\r\n        // state.arr.length = 1\r\n        add(dep);\r\n      }\r\n    });\r\n  } else {\r\n    // 可能是对象\r\n    if (key !== undefined) {\r\n      // 这里肯定是修改\r\n      add(depsMap.get(key));\r\n    }\r\n\r\n    // 如果修改数组中的某一个索引  该怎么办 比如arr[100] = 1\r\n    // 如果添加一个索引  要触发length的更新\r\n    switch (type) {\r\n      case TriggerOperatorTypes.ADD:\r\n        if (isArray(target) && isIntegerKey(key)) {\r\n          add(depsMap.get(\"length\"));\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  effects.forEach((effect: any) => effect());\r\n}\r\n","import {\r\n  hasChanged,\r\n  hasOwn,\r\n  isArray,\r\n  isIntegerKey,\r\n  isObject,\r\n} from \"@vue/shared\";\r\nimport { extend } from \"@vue/shared\";\r\nimport { track, trigger } from \"./effect\";\r\nimport { TrackOperatorTypes, TriggerOperatorTypes } from \"./operators\";\r\nimport { reactive, readonly } from \"./reactive\";\r\n\r\n// 是否为仅读 仅读没有set 并且仅读set会报错\r\n// 是不是深度代理\r\nfunction createGetter(isReadonly = false, shallow = false) {\r\n  return function get(target, key, receiver) {\r\n    const res = Reflect.get(target, key, receiver);\r\n    if (!isReadonly) {\r\n      // 如果数据为仅读  就要收集依赖 数据变化后要出发视图变化\r\n      // 用户执行effect  会从这里取值，此时就要收集effect\r\n      console.log(\"// 用户执行effect  会从这里取值 此时就要收集effect\");\r\n      track(target, TrackOperatorTypes.GET, key);\r\n    }\r\n\r\n    if (shallow) return res;\r\n\r\n    if (isObject(res)) {\r\n      return isReadonly ? readonly(res) : reactive(res);\r\n    }\r\n\r\n    return res;\r\n  };\r\n}\r\n\r\nfunction createSetter(shallow = false) {\r\n  return function set(target, key, value, receiver) {\r\n    const oldValue = target[key]; // 获取老的值\r\n\r\n    // 判断是新增的还是老的值\r\n    let hasKey =\r\n      isArray(target) && isIntegerKey(key)\r\n        ? Number(key) < target.length\r\n        : hasOwn(target, key);\r\n\r\n    // Reflect.set()  会返回当前set值是否成功  具备返回值\r\n    const result = Reflect.set(target, key, value, receiver); // target[key] = value\r\n\r\n    // 我们要区分  是新增的  还是修改的\r\n    if (!hasKey) {\r\n      // 新增\r\n      trigger(target, TriggerOperatorTypes.ADD, key, value);\r\n    } else if (hasChanged(oldValue, value)) {\r\n      // 修改\r\n      trigger(target, TriggerOperatorTypes.SET, key, value, oldValue);\r\n    }\r\n\r\n    // 当数据更新时  通知对应属性的effect重新执行\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\nconst get = createGetter();\r\nconst shallowGet = createGetter(false, true);\r\nconst readonlyGet = createGetter(true);\r\nconst shallowReadonlyGet = createGetter(true, true);\r\n\r\nconst set = createSetter();\r\nconst shallowSet = createSetter(true);\r\n\r\nexport const mutableHandlers = {\r\n  get,\r\n  set,\r\n};\r\n\r\nexport const shallowReactiveHandlers = {\r\n  get: shallowGet,\r\n  set: shallowSet,\r\n};\r\n\r\nconst readonlyObj = {\r\n  set: (target, key) => {\r\n    console.warn(`set readonly on key ${key} 失败`);\r\n  },\r\n};\r\n\r\nexport const readonlyHandlers = extend(\r\n  {\r\n    get: readonlyGet,\r\n  },\r\n  readonlyObj\r\n);\r\n\r\nexport const shallowReadOnlyHandlers = extend(\r\n  {\r\n    get: shallowReadonlyGet,\r\n  },\r\n  readonlyObj\r\n);\r\n","import { isObject } from \"@vue/shared\";\r\n\r\nimport {\r\n  mutableHandlers,\r\n  readonlyHandlers,\r\n  shallowReactiveHandlers,\r\n  shallowReadOnlyHandlers,\r\n} from \"./baseHandlers\";\r\n\r\nexport function reactive(target) {\r\n  return createReactiveObject(target, false, mutableHandlers);\r\n}\r\n\r\nexport function shallowReactive(target) {\r\n  return createReactiveObject(target, false, shallowReactiveHandlers);\r\n}\r\n\r\nexport function readonly(target) {\r\n  return createReactiveObject(target, true, readonlyHandlers);\r\n}\r\n\r\nexport function shallowReadonly(target) {\r\n  return createReactiveObject(target, true, shallowReadOnlyHandlers);\r\n}\r\n\r\n// 创建一个reactive代理集合\r\n// weakmap好处是会自动垃圾回收  不会造成内存泄露 而且weakmap存储对象的key 只能是对象\r\nconst reactiveMap = new WeakMap();\r\nconst readonlyMap = new WeakMap();\r\n\r\n// 使用函数科里化 根据参数不同  处理不同\r\nexport function createReactiveObject(target, isReadonly, baseHandlers) {\r\n  // 如果目标不是对象 将无法拦截  reactive->只能拦截对象\r\n  if (!isObject(target)) {\r\n    return target;\r\n  }\r\n\r\n  // 如果target被代理过了  就不要在代理了  直接返回该对象  可能一个对象被深度代理  又被仅读代理\r\n  const proxyMap = isReadonly ? readonlyMap : reactiveMap;\r\n\r\n  const existProxy = proxyMap.get(target);\r\n  if (existProxy) return existProxy;\r\n\r\n  const proxy = new Proxy(target, baseHandlers);\r\n\r\n  // 将要代理的对象和对应的代理结果进行缓存\r\n  proxyMap.set(target, proxy);\r\n\r\n  return proxy;\r\n}\r\n","import { hasChanged, isArray, isObject } from \"@vue/shared\";\r\nimport { track, trigger } from \"./effect\";\r\nimport { TrackOperatorTypes, TriggerOperatorTypes } from \"./operators\";\r\nimport { reactive } from \"./reactive\";\r\n\r\nexport function ref(value) {\r\n  // 将普通类型 变成一个对象\r\n\r\n  return createRef(value);\r\n}\r\n\r\nexport function shallowRef(value) {\r\n  return createRef(value, true);\r\n}\r\n\r\nconst convert = (value) => (isObject(value) ? reactive(value) : value);\r\n\r\nclass RefImpl {\r\n  public _value;\r\n  // 产生的实例添加该属性  标识为ref\r\n  public __v_isRef = true;\r\n\r\n  constructor(public rawValue, public shallow) {\r\n    // this._value = rawValue;\r\n    // this.rawValue = rawValue;\r\n    this._value = shallow ? rawValue : convert(rawValue);\r\n  }\r\n\r\n  // 类的属性访问器\r\n  get value() {\r\n    track(this, TrackOperatorTypes.GET, \"value\");\r\n    return this._value;\r\n  }\r\n\r\n  set value(newValue) {\r\n    // 判断新老值是否有变化\r\n    if (hasChanged(newValue, this.rawValue)) {\r\n      this.rawValue = newValue;\r\n      this._value = this.shallow ? newValue : convert(newValue);\r\n      trigger(this, TriggerOperatorTypes.SET, \"value\", newValue);\r\n    }\r\n  }\r\n}\r\n\r\nclass ObjectRefImpl {\r\n  // 产生的实例添加该属性  标识为ref\r\n  public __v_isRef = true;\r\n\r\n  constructor(public target, public key) {}\r\n\r\n  // 类的属性访问器\r\n  get value() {\r\n    track(this, TrackOperatorTypes.GET, \"value\");\r\n    return this.target[this.key];\r\n  }\r\n\r\n  set value(newValue) {\r\n    // 判断新老值是否有变化\r\n    this.target[this.key] = newValue;\r\n  }\r\n}\r\n\r\n// 可以将target 的 值 转化成ref\r\nexport function toRef(target, key) {\r\n  return new ObjectRefImpl(target, key);\r\n}\r\n\r\nfunction createRef(rawValue, shallow = false) {\r\n  return new RefImpl(rawValue, shallow);\r\n}\r\n\r\nexport function toRefs(object) {\r\n  const result = isArray(object) ? new Array(object.length) : {};\r\n\r\n  for (const key in object) {\r\n    result[key] = toRef(object, key);\r\n  }\r\n\r\n  return result;\r\n}\r\n"],"names":[],"mappings":"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"}